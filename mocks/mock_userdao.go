// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\ASUS\Desktop\2025-Need-For-Typing-Backend\dao\UserDAO.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"
	models "type/models"

	gomock "github.com/golang/mock/gomock"
)

// MockUserDAOInterface is a mock of UserDAOInterface interface.
type MockUserDAOInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserDAOInterfaceMockRecorder
}

// MockUserDAOInterfaceMockRecorder is the mock recorder for MockUserDAOInterface.
type MockUserDAOInterfaceMockRecorder struct {
	mock *MockUserDAOInterface
}

// NewMockUserDAOInterface creates a new mock instance.
func NewMockUserDAOInterface(ctrl *gomock.Controller) *MockUserDAOInterface {
	mock := &MockUserDAOInterface{ctrl: ctrl}
	mock.recorder = &MockUserDAOInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDAOInterface) EXPECT() *MockUserDAOInterfaceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserDAOInterface) CreateUser(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserDAOInterfaceMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserDAOInterface)(nil).CreateUser), user)
}

// GetUserByEmail mocks base method.
func (m *MockUserDAOInterface) GetUserByEmail(email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserDAOInterfaceMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserDAOInterface)(nil).GetUserByEmail), email)
}

// GetUserByUsername mocks base method.
func (m *MockUserDAOInterface) GetUserByUsername(username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserDAOInterfaceMockRecorder) GetUserByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUserDAOInterface)(nil).GetUserByUsername), username)
}

// RequestPasswordReset mocks base method.
func (m *MockUserDAOInterface) RequestPasswordReset(email, token string, expiresAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestPasswordReset", email, token, expiresAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestPasswordReset indicates an expected call of RequestPasswordReset.
func (mr *MockUserDAOInterfaceMockRecorder) RequestPasswordReset(email, token, expiresAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPasswordReset", reflect.TypeOf((*MockUserDAOInterface)(nil).RequestPasswordReset), email, token, expiresAt)
}

// ResetPassword mocks base method.
func (m *MockUserDAOInterface) ResetPassword(email, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", email, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockUserDAOInterfaceMockRecorder) ResetPassword(email, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockUserDAOInterface)(nil).ResetPassword), email, newPassword)
}

// VerifyEmail mocks base method.
func (m *MockUserDAOInterface) VerifyEmail(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmail", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockUserDAOInterfaceMockRecorder) VerifyEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockUserDAOInterface)(nil).VerifyEmail), email)
}

// VerifyResetToken mocks base method.
func (m *MockUserDAOInterface) VerifyResetToken(email, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyResetToken", email, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyResetToken indicates an expected call of VerifyResetToken.
func (mr *MockUserDAOInterfaceMockRecorder) VerifyResetToken(email, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyResetToken", reflect.TypeOf((*MockUserDAOInterface)(nil).VerifyResetToken), email, token)
}
